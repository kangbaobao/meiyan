//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `output.mp4`.
    static let outputMp4 = Rswift.FileResource(bundle: R.hostingBundle, name: "output", pathExtension: "mp4")
    /// Resource file `test.jpg`.
    static let testJpg = Rswift.FileResource(bundle: R.hostingBundle, name: "test", pathExtension: "jpg")

    /// `bundle.url(forResource: "output", withExtension: "mp4")`
    static func outputMp4(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.outputMp4
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "test", withExtension: "jpg")`
    static func testJpg(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.testJpg
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 18 images.
  struct image {
    /// Image `arrowleft`.
    static let arrowleft = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrowleft")
    /// Image `discover_noselect`.
    static let discover_noselect = Rswift.ImageResource(bundle: R.hostingBundle, name: "discover_noselect")
    /// Image `discover_select`.
    static let discover_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "discover_select")
    /// Image `home_noselect`.
    static let home_noselect = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_noselect")
    /// Image `home_select`.
    static let home_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_select")
    /// Image `me_noselect`.
    static let me_noselect = Rswift.ImageResource(bundle: R.hostingBundle, name: "me_noselect")
    /// Image `me_select`.
    static let me_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "me_select")
    /// Image `products_noselect`.
    static let products_noselect = Rswift.ImageResource(bundle: R.hostingBundle, name: "products_noselect")
    /// Image `products_select`.
    static let products_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "products_select")
    /// Image `rewards_noselect`.
    static let rewards_noselect = Rswift.ImageResource(bundle: R.hostingBundle, name: "rewards_noselect")
    /// Image `rewards_select`.
    static let rewards_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "rewards_select")
    /// Image `supplistVC_default`.
    static let supplistVC_default = Rswift.ImageResource(bundle: R.hostingBundle, name: "supplistVC_default")
    /// Image `support_noselect`.
    static let support_noselect = Rswift.ImageResource(bundle: R.hostingBundle, name: "support_noselect")
    /// Image `support_select`.
    static let support_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "support_select")
    /// Image `tab_saoyisao`.
    static let tab_saoyisao = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_saoyisao")
    /// Image `test.jpg`.
    static let testJpg = Rswift.ImageResource(bundle: R.hostingBundle, name: "test.jpg")
    /// Image `test1`.
    static let test1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "test1")
    /// Image `test2`.
    static let test2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "test2")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrowleft", bundle: ..., traitCollection: ...)`
    static func arrowleft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowleft, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "discover_noselect", bundle: ..., traitCollection: ...)`
    static func discover_noselect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.discover_noselect, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "discover_select", bundle: ..., traitCollection: ...)`
    static func discover_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.discover_select, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_noselect", bundle: ..., traitCollection: ...)`
    static func home_noselect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_noselect, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_select", bundle: ..., traitCollection: ...)`
    static func home_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_select, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me_noselect", bundle: ..., traitCollection: ...)`
    static func me_noselect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.me_noselect, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me_select", bundle: ..., traitCollection: ...)`
    static func me_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.me_select, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "products_noselect", bundle: ..., traitCollection: ...)`
    static func products_noselect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.products_noselect, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "products_select", bundle: ..., traitCollection: ...)`
    static func products_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.products_select, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rewards_noselect", bundle: ..., traitCollection: ...)`
    static func rewards_noselect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rewards_noselect, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rewards_select", bundle: ..., traitCollection: ...)`
    static func rewards_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rewards_select, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "supplistVC_default", bundle: ..., traitCollection: ...)`
    static func supplistVC_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.supplistVC_default, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "support_noselect", bundle: ..., traitCollection: ...)`
    static func support_noselect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.support_noselect, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "support_select", bundle: ..., traitCollection: ...)`
    static func support_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.support_select, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_saoyisao", bundle: ..., traitCollection: ...)`
    static func tab_saoyisao(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_saoyisao, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "test.jpg", bundle: ..., traitCollection: ...)`
    static func testJpg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.testJpg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "test1", bundle: ..., traitCollection: ...)`
    static func test1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.test1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "test2", bundle: ..., traitCollection: ...)`
    static func test2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.test2, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `FilterProcessFirstBottomcollCell`.
    static let filterProcessFirstBottomcollCell = _R.nib._FilterProcessFirstBottomcollCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FilterProcessFirstBottomcollCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.filterProcessFirstBottomcollCell) instead")
    static func filterProcessFirstBottomcollCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.filterProcessFirstBottomcollCell)
    }
    #endif

    static func filterProcessFirstBottomcollCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FilterProcessFirstBottomcollCell? {
      return R.nib.filterProcessFirstBottomcollCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FilterProcessFirstBottomcollCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `MYGPUMainTableViewCell`.
    static let mygpuMainTableViewCell: Rswift.ReuseIdentifier<MYGPUMainTableViewCell> = Rswift.ReuseIdentifier(identifier: "MYGPUMainTableViewCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.englishLocalize` struct is generated, and contains static references to 1 localization keys.
    struct englishLocalize {
      /// en translation: Album
      ///
      /// Locales: en, zh-Hans
      static let 选择图片 = Rswift.StringResource(key: "选择图片", tableName: "EnglishLocalize", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)

      /// en translation: Album
      ///
      /// Locales: en, zh-Hans
      static func 选择图片(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("选择图片", tableName: "EnglishLocalize", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "EnglishLocalize", preferredLanguages: preferredLanguages) else {
          return "选择图片"
        }

        return NSLocalizedString("选择图片", tableName: "EnglishLocalize", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib {
    struct _FilterProcessFirstBottomcollCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FilterProcessFirstBottomcollCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FilterProcessFirstBottomcollCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FilterProcessFirstBottomcollCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let myBasesiderViewController = StoryboardViewControllerResource<MYBasesiderViewController>(identifier: "MYBasesiderViewController")
      let myMetalMainViewController = StoryboardViewControllerResource<MYMetalMainViewController>(identifier: "MYMetalMainViewController")
      let myMpegMainViewController = StoryboardViewControllerResource<MYMpegMainViewController>(identifier: "MYMpegMainViewController")
      let mygpuSampleCameraViewController = StoryboardViewControllerResource<MYGPUSampleCameraViewController>(identifier: "MYGPUSampleCameraViewController")
      let mygpuShuoMingViewController = StoryboardViewControllerResource<MYGPUShuoMingViewController>(identifier: "MYGPUShuoMingViewController")
      let mygpuTwoImageViewController = StoryboardViewControllerResource<MYGPUTwoImageViewController>(identifier: "MYGPUTwoImageViewController")
      let name = "Main"

      func myBasesiderViewController(_: Void = ()) -> MYBasesiderViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myBasesiderViewController)
      }

      func myMetalMainViewController(_: Void = ()) -> MYMetalMainViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myMetalMainViewController)
      }

      func myMpegMainViewController(_: Void = ()) -> MYMpegMainViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myMpegMainViewController)
      }

      func mygpuSampleCameraViewController(_: Void = ()) -> MYGPUSampleCameraViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mygpuSampleCameraViewController)
      }

      func mygpuShuoMingViewController(_: Void = ()) -> MYGPUShuoMingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mygpuShuoMingViewController)
      }

      func mygpuTwoImageViewController(_: Void = ()) -> MYGPUTwoImageViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mygpuTwoImageViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().myBasesiderViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myBasesiderViewController' could not be loaded from storyboard 'Main' as 'MYBasesiderViewController'.") }
        if _R.storyboard.main().mygpuSampleCameraViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mygpuSampleCameraViewController' could not be loaded from storyboard 'Main' as 'MYGPUSampleCameraViewController'.") }
        if _R.storyboard.main().mygpuShuoMingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mygpuShuoMingViewController' could not be loaded from storyboard 'Main' as 'MYGPUShuoMingViewController'.") }
        if _R.storyboard.main().mygpuTwoImageViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mygpuTwoImageViewController' could not be loaded from storyboard 'Main' as 'MYGPUTwoImageViewController'.") }
        if _R.storyboard.main().myMetalMainViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myMetalMainViewController' could not be loaded from storyboard 'Main' as 'MYMetalMainViewController'.") }
        if _R.storyboard.main().myMpegMainViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myMpegMainViewController' could not be loaded from storyboard 'Main' as 'MYMpegMainViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
